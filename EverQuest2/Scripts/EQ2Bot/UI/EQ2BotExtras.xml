<?xml version="1.0" encoding="UTF-8" ?>
<ISUI>
  <!--
  <Commandcheckbox Name='BG_NoCombatRoutines'>
    <X>5%</X>
    <Y>10</Y>
    <Width>40</Width>
    <Height>20</Height>
    <Text>Battlegrounds:  Non-Combat Routines Only</Text>
    <AutoTooltip>If in a battleground, do not perform combat routines</AutoTooltip>
    <OnLeftClick>
      if ${This.Checked}
      {
        Script[EQ2Bot].Variable[BG_NoCombat]:Set[TRUE]
        LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[BG_NoCombat,TRUE]
        Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
      }
      else
      {
        Script[EQ2Bot].Variable[BG_NoCombat]:Set[FALSE]
        LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[BG_NoCombat,FALSE]
        Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
      }
    </OnLeftClick>
    <Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[BG_NoCombat]}</Data>
  </Commandcheckbox>
  -->         
	<Commandcheckbox Name='CombatFollow'>
		<X>5%</X>
		<Y>50</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Resume Follow after Combat, Zoning, or Rez ONLY</Text>
		<AutoTooltip>A less persistent version of follow</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[CombatFollow]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["CombatFollow",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[CombatFollow]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["CombatFollow",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[CombatFollow]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='WarnTank'>
		<X>5%</X>
		<Y>70</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Warn Tank When Aggro</Text>
		<AutoTooltip>Select to automatically send a tell to the main tank when you have an npc on you</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[WarnTankWhenAggro]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Warn tank when I have a mob on me",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[WarnTankWhenAggro]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Warn tank when I have a mob on me",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Warn tank when I have a mob on me]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='Shard'>
		<Visible>1</Visible>
		<X>5%</X>
		<Y>90</Y>
		<Width>80</Width>
		<Height>20</Height>
		<Text>Request Shards From:</Text>
		<AutoTooltip>Select to use Conjuror Shards for power</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[ShardMode]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Shard Mode",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[ShardMode]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Shard Mode",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Shard Mode]}</Data>
	</Commandcheckbox>
	<combobox name='ShardGroupMember'>
		<x>155</x>
		<y>90</y>
		<Width>20%</width>
		<Height>20</height>
		<AutoTooltip>The Group Member to request shards from</AutoTooltip>
		<Items></items>
		<OnLoad>
			This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Shard Group Member]}]
			This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Shard Group Member]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[ShardGroupMember]:Set[${This.SelectedItem.Text}]
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[Shard Group Member,${This.SelectedItem.Text}]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings</OnSelect>
		<OnLeftClick>
			declare tmpvar int

			This:ClearItems
			tmpvar:Set[1]
			if ${Me.InRaid}
			{
				do
				{
					if ${Me.Raid[${tmpvar}].InZone} &amp;&amp; (${Me.Raid[${tmpvar}].Class.Equal[conjuror]} || ${Me.Raid[${tmpvar}].Class.Equal[necromancer]})
					{
						This:AddItem[${Me.Raid[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=24
			}
			else
			{
				do
				{
					if ${Me.Group[${tmpvar}].InZone} &amp;&amp; (${Me.Group[${tmpvar}].Class.Equal[conjuror]} || ${Me.Group[${tmpvar}].Class.Equal[necromancer]})
					{
						This:AddItem[${Me.Group[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=5
			}
		</OnLeftClick>
	</combobox>
	<Commandcheckbox Name='Heart'>
		<Visible>1</Visible>
		<X>5%</X>
		<Y>110</Y>
		<Width>80</Width>
		<Height>20</Height>
		<Text>Request Hearts From:</Text>
		<AutoTooltip>Select to use Necro Hearts for power</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[HeartMode]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Heart Mode",TRUE]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[ShardMode]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Heart Mode",FALSE]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Heart Mode]}</Data>
	</Commandcheckbox>
	<combobox name='HeartGroupMember'>
		<x>155</x>
		<y>110</y>
		<Width>20%</width>
		<Height>20</height>
		<AutoTooltip>The Group Member to request Hearts from</AutoTooltip>
		<Items></items>
		<OnLoad>
			This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Heart Group Member]}]
			This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Heart Group Member]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[HeartGroupMember]:Set[${This.SelectedItem.Text}]
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[Heart Group Member,${This.SelectedItem.Text}]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings</OnSelect>
		<OnLeftClick>
			declare tmpvar int

			This:ClearItems
			tmpvar:Set[1]
			if ${Me.InRaid}
			{
				do
				{
					if ${Me.Raid[${tmpvar}].InZone} &amp;&amp; ${Me.Raid[${tmpvar}].Class.Equal[necromancer]}
					{
						This:AddItem[${Me.Raid[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=24
			}
			else
			{
				do
				{
					if ${Me.Group[${tmpvar}].InZone} &amp;&amp; ${Me.Group[${tmpvar}].Class.Equal[necromancer]}
					{
						This:AddItem[${Me.Group[${tmpvar}].Name}]
					}
				}
				while ${tmpvar:Inc}&lt;=5
			}
		</OnLeftClick>
	</combobox>
	<Commandcheckbox Name='DoHOs'>
		<X>5%</X>
		<Y>130</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Participate in HOs</Text>
		<AutoTooltip>Select to advance and complete HOs before casting any other spells</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[DoHOs]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["DoHOs",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[DoHOs]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["DoHOs",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[DoHOs]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='PetGuard'>
		<X>5%</X>
		<Y>150</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Pet Guard Self/Me</Text>
		<AutoTooltip>Select to enable pet guard self and pet guard me after being backed off</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[PetGuard]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["PetGuard",TRUE]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[PetGuard]:Set[FALSE]
				EQ2Execute /pet backoff
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["PetGuard",FALSE]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[PetGuard]}</Data>
	</Commandcheckbox>
	<Commandcheckbox Name='EpicMode'>
		<X>5%</X>
		<Y>170</Y>
		<Width>40</Width>
		<Height>20</Height>
		<Text>Enable Epic Encounter Logic</Text>
		<AutoTooltip>Select to designate to scripts to use Epic battle routines</AutoTooltip>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[EpicMode]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["EpicMode",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[EpicMode]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["EpicMode",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[EpicMode]}</Data>
	</Commandcheckbox>
	<Text Name='BuffRoutinesTimerText'>
		<X>60%</X>
		<Y>130</Y>
		<Width>25%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Buff Routine every:</Text>
	</Text>
	<Textentry Name='BuffRoutinesTimerInterval'>
		<X>83%</X>
		<Y>128</Y>
		<Width>10%</Width>
		<Height>15</Height>
		<Color>FFDDBB00</Color>
		<MaxLength>5</MaxLength>
		<OnLoad>This:SetText[${Script[EQ2Bot].Variable[BuffRoutinesTimerInterval]}]</OnLoad>
		<OnChange>
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[BuffRoutinesTimerInterval,${This.Text}]
			Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			Script[EQ2Bot].Variable[BuffRoutinesTimerInterval]:Set[${This.Text}]
			echo "EQ2Bot Debug :: BuffRoutinesTimerInterval now set to ${Script[EQ2Bot].Variable[BuffRoutinesTimerInterval]} ms"
		</OnChange>
	</Textentry>
	<Text Name='BuffRoutinesTimerText2'>
		<X>94%</X>
		<Y>130</Y>
		<Width>6%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>ms</Text>
	</Text>
	<Commandcheckbox name='Use MP Potions'>
		<X>5%</X>
		<Y>190</Y>
		<Width>100</Width>
		<Height>20</height>
		<Text>Use Potions for Power/Health</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[UsePotions]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Use Potions?",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[UsePotions]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Use Potions?",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Use Potions?]}</Data>
	</Commandcheckbox>
	<Text Name='OutOfCombatRoutinesTimerIntervalText'>
		<X>60%</X>
		<Y>150</Y>
		<Width>25%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>O.O.C Routine every:</Text>
	</Text>
	<Textentry Name='OutOfCombatRoutinesTimerInterval'>
		<X>83%</X>
		<Y>148</Y>
		<Width>10%</Width>
		<Height>15</Height>
		<Color>FFDDBB00</Color>
		<MaxLength>5</MaxLength>
		<OnLoad>This:SetText[${Script[EQ2Bot].Variable[OutOfCombatRoutinesTimerInterval]}]</OnLoad>
		<OnChange>
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[OutOfCombatRoutinesTimerInterval,${This.Text}]
			Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			Script[EQ2Bot].Variable[OutOfCombatRoutinesTimerInterval]:Set[${This.Text}]
			echo "EQ2Bot Debug :: OutOfCombatRoutinesTimerInterval now set to ${Script[EQ2Bot].Variable[OutOfCombatRoutinesTimerInterval]} ms"
		</OnChange>
	</Textentry>
	<Text Name='OutOfCombatRoutinesTimerIntervalText2'>
		<X>94%</X>
		<Y>150</Y>
		<Width>6%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>ms</Text>
	</Text>
	<Commandcheckbox name='Use Potions'>
		<X>5%</X>
		<Y>210</Y>
		<Width>100</Width>
		<Height>20</height>
		<Text>Use Potions for cures</Text>
		<OnLeftClick>
			if ${This.Checked}
			{
				Script[EQ2Bot].Variable[UseCurePotions]:Set[TRUE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Use potions for cures?",TRUE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
			else
			{
				Script[EQ2Bot].Variable[UseCurePotions]:Set[FALSE]
				LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting["Use potions for cures?",FALSE]
				Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			}
		</OnLeftClick>
		<Data>${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Use potions for cures?]}</Data>
	</Commandcheckbox>
	<Text Name='AggroDetectionTimerIntervalText'>
		<X>60%</X>
		<Y>170</Y>
		<Width>25%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Aggro Detect every:</Text>
	</Text>
	<Textentry Name='AggroDetectionTimerInterval'>
		<X>83%</X>
		<Y>168</Y>
		<Width>10%</Width>
		<Height>15</Height>
		<Color>FFDDBB00</Color>
		<MaxLength>5</MaxLength>
		<OnLoad>This:SetText[${Script[EQ2Bot].Variable[AggroDetectionTimerInterval]}]</OnLoad>
		<OnChange>
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[General Settings]:AddSetting[AggroDetectionTimerInterval,${This.Text}]
			Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
			Script[EQ2Bot].Variable[AggroDetectionTimerInterval]:Set[${This.Text}]
			echo "EQ2Bot Debug :: AggroDetectionTimerInterval now set to ${Script[EQ2Bot].Variable[AggroDetectionTimerInterval]} ms"
		</OnChange>
	</Textentry>
	<Text Name='AggroDetectionTimerIntervalText2'>
		<X>94%</X>
		<Y>170</Y>
		<Width>6%</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>ms</Text>
	</Text>
	<Text Name='lblArcane'>
		<X>5%</X>
		<Y>230</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Arcane</Text>
		<AutoTooltip>Potion to use for Arcane</AutoTooltip>
	</Text>
	<combobox name='cbArcane'>
		<x>75</x>
		<y>230</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Arcane</AutoTooltip>
		<OnLeftClick>
			variable string ArcaneShort = "Arcane Remedy"
			variable index:item Items
			variable iterator ItemIterator
			variable int Counter = 1
			This:ClearItems
			Me:QueryInventory[Items, Location =- "Inventory" &amp;&amp; Name =- "${ArcaneShort}"]
			Items:GetIterator[ItemIterator]
			if ${ItemIterator:First(exists)}
			{
				do
				{
					This:AddItem[${ItemIterator.Value.Name}]
				}
				while ${ItemIterator:Next(exists)}
			}
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[13].Equal[${ArcaneShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Arcane Potion Name]}]
			This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Arcane Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[ArcanePotion]:Set[${This.SelectedItem.Text}]
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[Arcane Potion Name,${This.SelectedItem.Text}]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
		</OnSelect>
	</combobox>
	<Text Name='lblElemental'>
		<X>5%</X>
		<Y>250</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Elemental</Text>
		<AutoTooltip>Potion to use for Elemental</AutoTooltip>
	</Text>
	<combobox name='cbElemental'>
		<x>75</x>
		<y>250</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Elemental</AutoTooltip>
		<OnLeftClick>
			variable string ElementalShort = "Elemental Remedy"
			variable index:item Items
			variable iterator ItemIterator
			variable int Counter = 1
			This:ClearItems
			Me:QueryInventory[Items, Location =- "Inventory" &amp;&amp; Name =- "${ElementalShort}"]
			Items:GetIterator[ItemIterator]
			if ${ItemIterator:First(exists)}
			{
				do
				{
					This:AddItem[${ItemIterator.Value.Name}]
				}
				while ${ItemIterator:Next(exists)}
			}
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[13].Equal[${ElementalShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Elemental Potion Name]}]
			This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Elemental Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[ElementalPotion]:Set[${This.SelectedItem.Text}]
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[Elemental Potion Name,${This.SelectedItem.Text}]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
		</OnSelect>
	</combobox>
	<Text Name='lblNoxious'>
		<X>5%</X>
		<Y>270</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Noxious</Text>
		<AutoTooltip>Potion to use for Noxious</AutoTooltip>
	</Text>
	<combobox name='cbNoxious'>
		<x>75</x>
		<y>270</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Noxious</AutoTooltip>
		<OnLeftClick>
			variable string NoxiousShort = "Noxious Remedy"
			variable index:item Items
			variable iterator ItemIterator
			variable int Counter = 1
			This:ClearItems
			Me:QueryInventory[Items, Location =- "Inventory" &amp;&amp; Name =- "${NoxiousShort}"]
			Items:GetIterator[ItemIterator]
			if ${ItemIterator:First(exists)}
			{
				do
				{
					This:AddItem[${ItemIterator.Value.Name}]
				}
				while ${ItemIterator:Next(exists)}
			}
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[13].Equal[${NoxiousShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Noxious Potion Name]}]
			This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Noxious Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[NoxiousPotion]:Set[${This.SelectedItem.Text}]
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[Noxious Potion Name,${This.SelectedItem.Text}]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
		</OnSelect>
	</combobox>
	<Text Name='lblTrauma'>
		<X>5%</X>
		<Y>290</Y>
		<Width>50</Width>
		<Height>20</Height>
		<Alignment>Left</Alignment>
		<Text>Trauma</Text>
		<AutoTooltip>Potion to use for Trauma</AutoTooltip>
	</Text>
	<combobox name='cbTrauma'>
		<x>75</x>
		<y>290</y>
		<width>40%</width>
		<height>20</height>
		<AutoTooltip>Potion to use for Trauma</AutoTooltip>
		<OnLeftClick>
			variable string TraumaShort = "Trauma Remedy"
			variable index:item Items
			variable iterator ItemIterator
			variable int Counter = 1
			This:ClearItems
			Me:QueryInventory[Items, Location =- "Inventory" &amp;&amp; Name =- "${TraumaShort}"]
			Items:GetIterator[ItemIterator]
			if ${ItemIterator:First(exists)}
			{
				do
				{
					This:AddItem[${ItemIterator.Value.Name}]
				}
				while ${ItemIterator:Next(exists)}
			}
			do
			{
				if ${Me.Equipment[${Counter}].Name.Right[13].Equal[${TraumaShort}]}
				{
					This:AddItem[${Me.Equipment[${Counter}].Name}]
				}
			}
			while ${Counter:Inc}&lt;=22
		</OnLeftClick>
		<OnLoad>
			This:AddItem[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Trauma Potion Name]}]
			This.ItemByText[${LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras].FindSetting[Trauma Potion Name]}]:Select
		</OnLoad>
		<OnSelect>
			Script[EQ2Bot].Variable[TraumaPotion]:Set[${This.SelectedItem.Text}]
			LavishSettings[EQ2Bot].FindSet[Character].FindSet[EQ2BotExtras]:AddSetting[Trauma Potion Name,${This.SelectedItem.Text}]
Script[EQ2Bot].VariableScope.EQ2Bot:Save_Settings
		</OnSelect>
	</combobox>
`</ISUI>
